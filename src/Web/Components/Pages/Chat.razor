@page "/"
@rendermode InteractiveServer
@using DslCopilot.Web.Services
@using DslCopilot.Web.Data
@inject DslAIService AIService
@inject LanguageService LanguageService
@inject ConsoleService ConsoleService;
@inject ChatSessionIdService ChatSessionIdService;
@implements IDisposable

<div class="chat-container">
  <div class="chat-message-container">
    @foreach (var msg in chatMessages)
    {
      <div class="chat-input">@msg.Message (@msg.SelectedLanguage)</div>
      <div class="chat-response">
      <pre>@(msg.Response)</pre>
    </div>
    }
  </div>
</div>
<div class="user-input">
  <div style="visibility: @SpinnerVisibility">
    <div class="spinner-border" role="status">
      <span class="sr-only"></span>
    </div>
  </div>
  <div>
    <input type="text" @bind="@message" @onkeyup="CheckForEnter" />
  </div>
  <LanguageSelector OnLanguageChanged="OnLanguageChanged" />
</div>
<Console />


@code {
  private string message = string.Empty;
  private IList<ChatMessage> chatMessages = new List<ChatMessage>();

  private string selectedLanguage = "(none)";

  private string SpinnerVisibility = "hidden";

  private CancellationTokenSource _cts = new();

  private DslDef MyDsl = new DslDef
  {
    Name = "MyDsl"
  };


  private async Task OnLanguageChanged(string language)
  {
    selectedLanguage = language;
    var sessionId = ChatSessionIdService.GetChatSessionId();
    ConsoleService.WriteToConsole(sessionId, $"Language Changing Scheduler: {SynchronizationContext.Current?.ToString()}");
    var grammarFile = await LanguageService
      .GetGrammarForLanguage(selectedLanguage, _cts.Token);
    ConsoleService.WriteToConsole(sessionId, $"Language Changed Scheduler: {SynchronizationContext.Current?.ToString()}");
    MyDsl.AntlrDef = grammarFile;
  }

  private async Task CheckForEnter(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
    var sessionId = ChatSessionIdService.GetChatSessionId();
    ConsoleService.WriteToConsole(sessionId, $"Changing Scheduler: {SynchronizationContext.Current?.ToString()}");
      await SendMessage();
    ConsoleService.WriteToConsole(sessionId, $"Changed Scheduler: {SynchronizationContext.Current?.ToString()}");
    }
  }

  private async Task SendMessage()
  {
    var newMessage = new ChatMessage
    {
      Message = message,
      Response = string.Empty,
      SelectedLanguage = selectedLanguage
    };

    // Clear the input field
    message = string.Empty;
    chatMessages.Add(newMessage);

    // Call DslAIService to send chat message
    SpinnerVisibility = "visible";
    newMessage.Response = await AIService
      .AskAI(newMessage.Message, MyDsl.AntlrDef, selectedLanguage, _cts.Token);

    SpinnerVisibility = "hidden";
    await InvokeAsync(StateHasChanged);
  }

  public void Dispose()
  {
    _cts.Cancel();
    _cts.Dispose();
  }
}
