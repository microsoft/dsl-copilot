@page "/"
@rendermode InteractiveServer
@using DslCopilot.Web.Services;
@using DslCopilot.Web.Data;
@inject DslAIService AIService;
@inject LanguageService LanguageService;
@inject ConsoleService ConsoleService;
@inject ChatSessionIdService ChatSessionIdService;
@inject ChatSessionService ChatSessionService;
@implements IDisposable;

<div class="chat-container">
    @foreach (var msg in chatMessages.Reverse())
    {
      <ChatResponseContainer Message="@msg" CancellationToken="@_cts.Token" />
      <div class="chat-message-container">
          <div class="chat-bubble-input">
              <div class="">@msg.Message (@msg.SelectedLanguage)</div>
          </div>
      </div>
    }
</div>
<div class="user-input">
  <div style="visibility: @SpinnerVisibility">
    <div class="spinner-border" role="status">
      <span class="sr-only"></span>
    </div>
  </div>
  <div>
    <input type="text" @bind="@message" @onkeyup="CheckForEnter" />
  </div>
  <DslCopilot.Web.Components.LanguageSelector OnLanguageChanged="OnLanguageChanged" />
  <button type="button" class="btn btn-primary" @onclick="ClearChatHistory">Clear Chat History</button>
</div>
<DslCopilot.Web.Components.Console />


@code {
  private string message = string.Empty;
  private IList<ChatMessage> chatMessages = new List<ChatMessage>();

  private string selectedLanguage = "(none)";

  private string SpinnerVisibility = "hidden";

  private CancellationTokenSource _cts = new();

  private DslDef MyDsl = new()
  {
    Name = "MyDsl"
  };


  private async Task OnLanguageChanged(string language)
  {
    selectedLanguage = language;
    await InvokeAsync(StateHasChanged).ConfigureAwait(false);
  }

  private async Task CheckForEnter(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      await SendMessage();
    }
  }

  private async Task SendMessage()
  {
    var newMessage = new ChatMessage
      {
        Message = message,
        Response = string.Empty,
        SelectedLanguage = selectedLanguage
      };

    chatMessages.Add(newMessage);

    // Clear the input field
    message = string.Empty;

    // Call DslAIService to send chat message
    SpinnerVisibility = "visible";
    newMessage.Response = await AIService
      .AskAI(newMessage.Message, selectedLanguage, _cts.Token)
      .ConfigureAwait(false);

    SpinnerVisibility = "hidden";
    await InvokeAsync(StateHasChanged);
  }

  private void ClearChatHistory()
  {
    var chatSessionId = ChatSessionIdService.GetChatSessionId();
    ChatSessionService.ClearChatSession(chatSessionId);
    ConsoleService.WriteToConsole(chatSessionId, "Chat history cleared.");
  }

  public void Dispose()
  {
    _cts.Cancel();
    _cts.Dispose();
  }
}
